name: Code test and coverage

on: [pull_request]

jobs:
  install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Dependency cache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/Cypress
        key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Instalar dependÃªncias
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm install --legacy-peer-deps

  unit_tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Restore dependency cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/Cypress
        key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

    - name: Run Unit Tests
      run: npm run test:ci

  cypress_tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Restore dependency cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/Cypress
        key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

    - name: Get deployment url
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Set variables for GitHub API
        REPO=${{ github.repository }}
        PULL_REQUEST_NUMBER=${{ github.event.pull_request.number }}
        COMMITS_URL="https://api.github.com/repos/$REPO/pulls/$PULL_REQUEST_NUMBER/commits"

        # Fetch commits from the PR to get the SHA of the last commit
        echo "Fetching commits from GitHub API..."
        COMMITS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$COMMITS_URL")

        # Extract the SHA of the last commit
        LAST_COMMIT_SHA=$(echo "$COMMITS" | jq -r '.[-1].sha')

        echo "Last commit SHA: $LAST_COMMIT_SHA"

        # Set the deployments URL with the SHA of the last commit
        DEPLOYMENTS_URL="https://api.github.com/repos/$REPO/deployments?sha=$LAST_COMMIT_SHA"

        # Retry fetching deployments for 120 seconds
        echo "Waiting up to 120 seconds to find a deployment with the last commit SHA..."

        MAX_WAIT_TIME=120  # Wait for 120 seconds
        WAIT_INTERVAL=10   # Retry every 10 seconds
        FOUND_DEPLOYMENT=false

        START_TIME=$(date +%s)
        while [ $(($(date +%s) - $START_TIME)) -lt $MAX_WAIT_TIME ]; do
          # Fetch deployments from GitHub API
          DEPLOYMENTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$DEPLOYMENTS_URL")

          # Check if there is any deployment
          DEPLOYMENT_COUNT=$(echo "$DEPLOYMENTS" | jq length)

          if [[ "$DEPLOYMENT_COUNT" -gt 0 ]]; then
            # Extract the statuses_url of the first deployment
            STATUSES_URL=$(echo "$DEPLOYMENTS" | jq -r '.[0].statuses_url')

            if [[ "$STATUSES_URL" != "null" && -n "$STATUSES_URL" ]]; then
              echo "Deployment found. Fetching status URL: $STATUSES_URL"
              FOUND_DEPLOYMENT=true
              break
            fi
          fi

          echo "Deployment not found, retrying in $WAIT_INTERVAL seconds..."
          sleep $WAIT_INTERVAL
        done

        if ! $FOUND_DEPLOYMENT; then
          echo "Error: Deployment not found after $MAX_WAIT_TIME seconds."
          exit 1
        fi

        # Fetch the status details from the statuses URL
        STATUS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$STATUSES_URL")

        # Debug: Print the status response
        echo "Debug: Full status response:"
        echo "$STATUS_RESPONSE"

        # Extract the target_url of the status with "state": "success"
        VERCEL_URL=$(echo "$STATUS_RESPONSE" | jq -r '.[] | select(.state == "success") | .target_url')

        # Debug: Print the extracted Vercel URL
        echo "Debug: Extracted Vercel URL: $VERCEL_URL"

        if [[ -n "$VERCEL_URL" ]]; then
          echo "Deployment URL found: $VERCEL_URL"
          echo "CYPRESS_BASE_URL=$VERCEL_URL" >> $GITHUB_ENV
        else
          echo "Error: Vercel URL not found with state 'success'."
          exit 1
        fi

    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        install: false
        browser: chrome

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        if-no-files-found: ignore